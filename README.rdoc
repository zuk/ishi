= Ishi

* http://github.com/zuk/ishi

Hassle-free, pure-Ruby, YAML-on-disk object persistence.

* No external dependencies. Ruby all the way through.
* Stores data on disk, serialized as YAML, one file per object.
* No configuration required on the user's part, other than specifying the
  datastore path.

Ishi works on plain Ruby objects. Just mix in the <tt>Ishi::Persist</tt> module
into your class. Ishi also doesn't try to do a whole lot other than letting you
persist your objects on disk and then load them back later. It's basically
just a wrapper for YAML serialization, with sensible file structuring and
a familliar API.

Use Ishi when you want your application portable and easy to configure; when
you don't want to think about persitence too hard.
Don't use Ishi when dealing with a lot of data. That would be just dumb.

Ishi was inspired by Nick DeMonner's  [Stone](http://github.com/ndemonner/stone)
library. (Ishi means "stone" in Japanese). I didn't like Stone's semantics and
architecture and started writing Ishi to satisfy my own needs.

== EXAMPLES

=== CRUD

  # Any plain Ruby class will do. Just include Ishi::Persist
  class Kitty
    include Ishi::Persist

    def name=(name)
      @name = name
    end

    def name
      @name
    end
  end

  
  a = Kitty.new
  a.name = "Eva"
  a.save!

  puts a.id  # ==> 1

  b = Kitty.new
  b.name = "Batman"
  b.save!

  puts b.id  # ==> 2



== INSTALL:

gem install ishi

== LICENSE:

(The MIT License)

Copyright (c) 2010 Matt Zukowski

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.